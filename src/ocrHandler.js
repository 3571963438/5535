import{createWorker}from'tesseract.js';import fs from'fs/promises';import{existsSync}from'fs';export async function handleOCR({name:n,arguments:a}){switch(n){case'ocr_image':return await oi(a);case'ocr_image_base64':return await ob(a);case'ocr_batch':return await bt(a);case'get_supported_languages':return await gl();default:throw new Error(`未知工具: ${n}`)}}async function oi({image_path:p,language:l='eng',psm:m=3,output_format:f='text'}){try{if(!existsSync(p)){throw new Error(`图片文件不存在: ${p}`)}const w=await createWorker(l);await w.setParameters({tessedit_pageseg_mode:m});const{data:d}=await w.recognize(p);await w.terminate();if(f==='json'){return{content:[{type:'text',text:JSON.stringify({text:d.text,confidence:d.confidence,words:d.words.map(x=>({text:x.text,confidence:x.confidence,bbox:x.bbox}))},null,2)}]}}return{content:[{type:'text',text:`识别结果:\n\n${d.text}\n\n置信度: ${d.confidence.toFixed(2)}%`}]}}catch(e){throw new Error(`OCR 识别失败: ${e.message}`)}}async function ob({image_base64:b,language:l='eng',psm:m=3,output_format:f='text'}){try{const w=await createWorker(l);await w.setParameters({tessedit_pageseg_mode:m});const{data:d}=await w.recognize(b);await w.terminate();if(f==='json'){return{content:[{type:'text',text:JSON.stringify({text:d.text,confidence:d.confidence},null,2)}]}}return{content:[{type:'text',text:`识别结果:\n\n${d.text}\n\n置信度: ${d.confidence.toFixed(2)}%`}]}}catch(e){throw new Error(`Base64 OCR 识别失败: ${e.message}`)}}async function bt({image_paths:ps,language:l='eng',output_format:f='text'}){try{const w=await createWorker(l);const rs=[];for(const p of ps){if(!existsSync(p)){rs.push({path:p,error:'文件不存在'});continue}const{data:d}=await w.recognize(p);rs.push({path:p,text:d.text,confidence:d.confidence})}await w.terminate();if(f==='json'){return{content:[{type:'text',text:JSON.stringify(rs,null,2)}]}}const t=rs.map((r,i)=>`图片 ${i+1}: ${r.path}\n${r.error||r.text}\n置信度: ${r.confidence?r.confidence.toFixed(2)+'%':'N/A'}`).join('\n\n---\n\n');return{content:[{type:'text',text:`批量识别结果:\n\n${t}`}]}}catch(e){throw new Error(`批量 OCR 失败: ${e.message}`)}}async function gl(){const langs=[{code:'eng',name:'English'},{code:'chi_sim',name:'简体中文'},{code:'chi_tra',name:'繁体中文'},{code:'jpn',name:'日语'},{code:'kor',name:'韩语'},{code:'fra',name:'法语'},{code:'deu',name:'德语'},{code:'spa',name:'西班牙语'},{code:'rus',name:'俄语'},{code:'ara',name:'阿拉伯语'},{code:'hin',name:'印地语'},{code:'tha',name:'泰语'},{code:'vie',name:'越南语'}];const t=langs.map(x=>`${x.code}: ${x.name}`).join('\n');return{content:[{type:'text',text:`支持的语言:\n\n${t}`}]}}
